# OH-MY-ZSH CONFIGURATION -- {{{
#
# Boilerplate from installing OH-MY-ZSH
# I'm leaving these comments here in case I change my mind about them
#

	# If you come from bash you might have to change your $PATH.
	# export PATH=$HOME/bin:/usr/local/bin:$PATH
	
	# Path to your oh-my-zsh installation.
	export ZSH=$HOME/.oh-my-zsh
	
	# Set name of the theme to load. Optionally, if you set this to "random"
	# it'll load a random theme each time that oh-my-zsh is loaded.
	# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
	ZSH_THEME="amuse"
	
	# Uncomment the following line to use case-sensitive completion.
	# CASE_SENSITIVE="true"
	
	# Uncomment the following line to use hyphen-insensitive completion. Case
	# sensitive completion must be off. _ and - will be interchangeable.
	# HYPHEN_INSENSITIVE="true"
	
	# Uncomment the following line to disable bi-weekly auto-update checks.
	# DISABLE_AUTO_UPDATE="true"
	
	# Uncomment the following line to change how often to auto-update (in days).
	# export UPDATE_ZSH_DAYS=13
	
	# Uncomment the following line to disable colors in ls.
	# DISABLE_LS_COLORS="true"
	
	# Uncomment the following line to disable auto-setting terminal title.
	# DISABLE_AUTO_TITLE="true"
	
	# Uncomment the following line to enable command auto-correction.
	# ENABLE_CORRECTION="true"
	
	# Uncomment the following line to display red dots whilst waiting for completion.
	# COMPLETION_WAITING_DOTS="true"
	
	# Uncomment the following line if you want to disable marking untracked files
	# under VCS as dirty. This makes repository status check for large repositories
	# much, much faster.
	# DISABLE_UNTRACKED_FILES_DIRTY="true"
	
	# Uncomment the following line if you want to change the command execution time
	# stamp shown in the history command output.
	# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
	# HIST_STAMPS="mm/dd/yyyy"
	
	# Would you like to use another custom folder than $ZSH/custom?
	# ZSH_CUSTOM=/path/to/new-custom-folder
	
	# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
	# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
	# Example format: plugins=(rails git textmate ruby lighthouse)
	# Add wisely, as too many plugins slow down shell startup.
  #plugins=(virtualenv)
	plugins=(git)
	
	source $ZSH/oh-my-zsh.sh
	
	# User configuration
	
	# export MANPATH="/usr/local/man:$MANPATH"
	
	# You may need to manually set your language environment
	# export LANG=en_US.UTF-8
	
	# Preferred editor for local and remote sessions
	# if [[ -n $SSH_CONNECTION ]]; then
	#   export EDITOR='vim'
	# else
	#   export EDITOR='mvim'
	# fi
	
	# Compilation flags
	# export ARCHFLAGS="-arch x86_64"
	
	# ssh
	# export SSH_KEY_PATH="~/.ssh/rsa_id"
	

# }}}

# AUTOLOAD -- {{{
#
# ZSH functions to be loaded on source
#

  autoload -U history-pattern-search

# }}}

# KEYBINDINGS -- {{{
    # create a zkbd compatible hash;
    # to add other keys to this hash, see: man 5 terminfo
    typeset -A key

    key[Home]=${terminfo[khome]}
    key[End]=${terminfo[kend]}
    key[Insert]=${terminfo[kich1]}
    key[Delete]=${terminfo[kdch1]}
    key[Up]=${terminfo[kcuu1]}
    key[Down]=${terminfo[kcud1]}
    key[Left]=${terminfo[kcub1]}
    key[Right]=${terminfo[kcuf1]}
    key[PageUp]=${terminfo[kpp]}
    key[PageDown]=${terminfo[knp]}

    # Key assignment
    [[ -n "${key[Home]}"     ]]  && bindkey  "${key[Home]}"     beginning-of-line
    [[ -n "${key[End]}"      ]]  && bindkey  "${key[End]}"      end-of-line
    [[ -n "${key[Insert]}"   ]]  && bindkey  "${key[Insert]}"   overwrite-mode
    [[ -n "${key[Delete]}"   ]]  && bindkey  "${key[Delete]}"   delete-char
    [[ -n "${key[Up]}"       ]]  && bindkey  "${key[Up]}"       up-line-or-history
    [[ -n "${key[Down]}"     ]]  && bindkey  "${key[Down]}"     down-line-or-history
    [[ -n "${key[Left]}"     ]]  && bindkey  "${key[Left]}"     backward-char
    [[ -n "${key[Right]}"    ]]  && bindkey  "${key[Right]}"    forward-char
    [[ -n "${key[PageUp]}"   ]]  && bindkey  "${key[PageUp]}"   beginning-of-buffer-or-history
    [[ -n "${key[PageDown]}" ]]  && bindkey  "${key[PageDown]}" end-of-buffer-or-history

    bindkey '[1;5D'   backward-word
    bindkey '[1;5C'   forward-word

    # Finally, make sure the terminal is in application mode, when zle is
    # active. Only then are the values from $terminfo valid.
    if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
        function zle-line-init () {
            printf '%s' "${terminfo[smkx]}"
        }
        function zle-line-finish () {
            printf '%s' "${terminfo[rmkx]}"
        }
        zle -N zle-line-init
        zle -N zle-line-finish
    fi

    #zle -N history-beginning-search-backward-end history-search-end
    zle -N history-pattern-search-backward history-pattern-search
    zle -N history-pattern-search-forward history-pattern-search
    bindkey '^_' history-incremental-pattern-search-backward
    bindkey '^[[1;5A' history-incremental-search-backward # <C-Up>
    bindkey '^[[1;5B' history-incremental-search-forward  # <C-Down>, i think
# }}}

# DIRSTACK -- {{{
    DIRSTACKFILE="$HOME/.cache/zsh/dirs"
    if [[ -f $DIRSTACKFILE ]] && [[ $#dirstack -eq 0 ]]; then
      dirstack=( ${(f)"$(< $DIRSTACKFILE)"} )
      #[[ -d $dirstack[1] ]] && cd $dirstack[1]
    fi
    chpwd() {
      print -l $PWD ${(u)dirstack} >$DIRSTACKFILE
    }

    DIRSTACKSIZE=20

    setopt autopushd pushdsilent pushdtohome

    ## Remove duplicate entries
    setopt pushdignoredups

    ## This reverts the +/- operators.
    setopt pushdminus
# }}}

# EXPORTS -- {{{
    export VISUAL=vim
    export EDITOR=$VISUAL
    export GTK_THEME=Numix
    export TERMINAL=st
# }}}

# WORKING DIRECTORY -- {{{
	# function to change the current Working Directory
    function cwd() {
        dir=$(realpath $1)
        if [[ -z "$dir" ]]; then
            echo "ERROR: cannot set Working Directory to NULL"
        elif [[ ! -d "$dir" ]]; then
            echo "ERROR: "$1" not a directory"
        else
            echo $dir > $WDFILE
            cd $(cat $WDFILE)
        fi
    }

    # actually cd into the current Working Directory
    WDFILE="$HOME/.cache/zsh/wd"
    if [[ ! -f $WDFILE ]]; then
        echo $HOME > $WDFILE
    else
        cd $(cat $WDFILE)
    fi
# }}}

# ALIASES -- {{{
#
# Set of aliased commands
# For a full list of active aliases, run `alias`.
    alias tm="tmux -f ~/.config/tmux.conf -2"
    alias tmh="cat ~/.tmux.help"
    alias ls="ls --color"
    alias sudo="sudo -E"
    alias oct="octave --no-gui"
    alias clr="clear"

    # TaskWarrior
    alias tl="task list"
    alias ta="task add"
    alias tst="task start"
    alias tdo="task done"
    alias tdel="task delete"
    alias tmod="task modify"
    alias tsyn="task sync"
# }}}
